//  ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
//  SVG Encode
//  ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀

@function str-replace( $string, $search, $replace: '' ) {
  $index: str-index( $string, $search );
  @if $index {
    @return str-slice( $string, 1, $index - 1 ) + $replace + str-replace( str-slice( $string, $index + str-length( $search ) ), $search, $replace );
  }
  @return $string;
}

@function url-encode( $svg ) {
  // Chunk up string in order to avoid "stack level too deep" error
  $encoded: '';
  $slice: 2000;
  $index: 0;
  $loops: ceil( str-length( $svg )/$slice );
  @for $i from 1 through $loops {
    $chunk: str-slice( $svg, $index, $index + $slice - 1 );

    // Encode ( may need a few extra replacements )
    $chunk: str-replace( $chunk, '  ', '' );
    $chunk: str-replace( $chunk, '%', '%25' );
    $chunk: str-replace( $chunk, '<', '%3C' );
    $chunk: str-replace( $chunk, '>', '%3E' );
    $chunk: str-replace( $chunk, ' ', '%20' );
    $chunk: str-replace( $chunk, '!', '%21' );
    $chunk: str-replace( $chunk, '*', '%2A' );
    $chunk: str-replace( $chunk, "'", '%27' );
    $chunk: str-replace( $chunk, '"', '%22' );
    $chunk: str-replace( $chunk, '(', '%28' );
    $chunk: str-replace( $chunk, ')', '%29' );
    $chunk: str-replace( $chunk, ';', '%3B' );
    $chunk: str-replace( $chunk, ',', '%3A' );
    $chunk: str-replace( $chunk, '@', '%40' );
    $chunk: str-replace( $chunk, '&', '%26' );
    $chunk: str-replace( $chunk, '=', '%3D' );
    $chunk: str-replace( $chunk, '+', '%2B' );
    $chunk: str-replace( $chunk, '$', '%24' );
    $chunk: str-replace( $chunk, ',', '%2C' );
    $chunk: str-replace( $chunk, '/', '%2F' );
    $chunk: str-replace( $chunk, '?', '%3F' );
    $chunk: str-replace( $chunk, '#', '%23' );
    $chunk: str-replace( $chunk, '[', '%5B' );
    $chunk: str-replace( $chunk, ']', '%5D' );
    $chunk: str-replace( $chunk, '\A ', '' );
    $chunk: str-replace( $chunk, '
', '' );

    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }
  @return $encoded;
}

@function inline-svg( $svg ) {
  @return url( 'data:image/svg+xml;utf8,#{url-encode( $svg )}' );
}

@function colored-inline-svg( $svg, $color ) {
  $replaced-svg: str-replace( $svg, '#000000', $color );
  @return url( 'data:image/svg+xml;utf8,#{url-encode( $replaced-svg )}' );
}

//  ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
//  Strip Units for Calculations
//  ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀

@function strip-unit( $number ) {
  @if type-of( $number ) == 'number' and not unitless( $number ) {
    @return $number / ( $number * 0 + 1 );
  }
  @return $number;
}

//  ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
//  Convert rem to px
//  ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀

@function rem2px( $value ) {
  @return strip-unit( $value ) * 16 + 'px';
}
